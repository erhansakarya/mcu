
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  000006a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  20000008  000006b0  00020008  2**2
                  ALLOC
  3 .stack        00002004  20000044  000006ec  00020008  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000cf26  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001604  00000000  00000000  0002cfaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000015a2  00000000  00000000  0002e5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001e0  00000000  00000000  0002fb55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001a8  00000000  00000000  0002fd35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016481  00000000  00000000  0002fedd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000053a1  00000000  00000000  0004635e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000849b5  00000000  00000000  0004b6ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000041c  00000000  00000000  000d00b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	48 20 00 20 fd 04 00 00 f9 04 00 00 f9 04 00 00     H . ............
	...
  2c:	f9 04 00 00 00 00 00 00 00 00 00 00 f9 04 00 00     ................
  3c:	f9 04 00 00 f9 04 00 00 f9 04 00 00 f9 04 00 00     ................
  4c:	f9 04 00 00 f9 04 00 00 f9 04 00 00 f9 04 00 00     ................
  5c:	f9 04 00 00 f9 04 00 00 f9 04 00 00 f9 04 00 00     ................
  6c:	f9 04 00 00 f9 04 00 00 f9 04 00 00 f9 04 00 00     ................
  7c:	f9 04 00 00 f9 04 00 00 f9 04 00 00 f9 04 00 00     ................
  8c:	f9 04 00 00 f9 04 00 00 f9 04 00 00 f9 04 00 00     ................
  9c:	f9 04 00 00 f9 04 00 00 f9 04 00 00 f9 04 00 00     ................
  ac:	f9 04 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000008 	.word	0x20000008
  d4:	00000000 	.word	0x00000000
  d8:	000006a8 	.word	0x000006a8

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	2000000c 	.word	0x2000000c
 108:	000006a8 	.word	0x000006a8
 10c:	000006a8 	.word	0x000006a8
 110:	00000000 	.word	0x00000000

00000114 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
 114:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
 116:	4b08      	ldr	r3, [pc, #32]	; (138 <delay_cycles_ms+0x24>)
 118:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
 11a:	4a08      	ldr	r2, [pc, #32]	; (13c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
 11c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 11e:	2180      	movs	r1, #128	; 0x80
 120:	0249      	lsls	r1, r1, #9
	while (n--) {
 122:	3801      	subs	r0, #1
 124:	d307      	bcc.n	136 <delay_cycles_ms+0x22>
	if (n > 0) {
 126:	2c00      	cmp	r4, #0
 128:	d0fb      	beq.n	122 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
 12a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
 12c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 12e:	6813      	ldr	r3, [r2, #0]
 130:	420b      	tst	r3, r1
 132:	d0fc      	beq.n	12e <delay_cycles_ms+0x1a>
 134:	e7f5      	b.n	122 <delay_cycles_ms+0xe>
	}
}
 136:	bd30      	pop	{r4, r5, pc}
 138:	20000000 	.word	0x20000000
 13c:	e000e010 	.word	0xe000e010

00000140 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
 140:	4770      	bx	lr
	...

00000144 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 144:	4b0c      	ldr	r3, [pc, #48]	; (178 <cpu_irq_enter_critical+0x34>)
 146:	681b      	ldr	r3, [r3, #0]
 148:	2b00      	cmp	r3, #0
 14a:	d106      	bne.n	15a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 14c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 150:	2b00      	cmp	r3, #0
 152:	d007      	beq.n	164 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 154:	2200      	movs	r2, #0
 156:	4b09      	ldr	r3, [pc, #36]	; (17c <cpu_irq_enter_critical+0x38>)
 158:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 15a:	4a07      	ldr	r2, [pc, #28]	; (178 <cpu_irq_enter_critical+0x34>)
 15c:	6813      	ldr	r3, [r2, #0]
 15e:	3301      	adds	r3, #1
 160:	6013      	str	r3, [r2, #0]
}
 162:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 164:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 166:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 16a:	2200      	movs	r2, #0
 16c:	4b04      	ldr	r3, [pc, #16]	; (180 <cpu_irq_enter_critical+0x3c>)
 16e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 170:	3201      	adds	r2, #1
 172:	4b02      	ldr	r3, [pc, #8]	; (17c <cpu_irq_enter_critical+0x38>)
 174:	701a      	strb	r2, [r3, #0]
 176:	e7f0      	b.n	15a <cpu_irq_enter_critical+0x16>
 178:	20000024 	.word	0x20000024
 17c:	20000028 	.word	0x20000028
 180:	20000004 	.word	0x20000004

00000184 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 184:	4b08      	ldr	r3, [pc, #32]	; (1a8 <cpu_irq_leave_critical+0x24>)
 186:	681a      	ldr	r2, [r3, #0]
 188:	3a01      	subs	r2, #1
 18a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 18c:	681b      	ldr	r3, [r3, #0]
 18e:	2b00      	cmp	r3, #0
 190:	d109      	bne.n	1a6 <cpu_irq_leave_critical+0x22>
 192:	4b06      	ldr	r3, [pc, #24]	; (1ac <cpu_irq_leave_critical+0x28>)
 194:	781b      	ldrb	r3, [r3, #0]
 196:	2b00      	cmp	r3, #0
 198:	d005      	beq.n	1a6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 19a:	2201      	movs	r2, #1
 19c:	4b04      	ldr	r3, [pc, #16]	; (1b0 <cpu_irq_leave_critical+0x2c>)
 19e:	701a      	strb	r2, [r3, #0]
 1a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 1a4:	b662      	cpsie	i
	}
}
 1a6:	4770      	bx	lr
 1a8:	20000024 	.word	0x20000024
 1ac:	20000028 	.word	0x20000028
 1b0:	20000004 	.word	0x20000004

000001b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 1b4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 1b6:	490c      	ldr	r1, [pc, #48]	; (1e8 <system_clock_source_osc8m_set_config+0x34>)
 1b8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 1ba:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 1bc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 1be:	7840      	ldrb	r0, [r0, #1]
 1c0:	2201      	movs	r2, #1
 1c2:	4010      	ands	r0, r2
 1c4:	0180      	lsls	r0, r0, #6
 1c6:	2640      	movs	r6, #64	; 0x40
 1c8:	43b3      	bics	r3, r6
 1ca:	4303      	orrs	r3, r0
 1cc:	402a      	ands	r2, r5
 1ce:	01d2      	lsls	r2, r2, #7
 1d0:	2080      	movs	r0, #128	; 0x80
 1d2:	4383      	bics	r3, r0
 1d4:	4313      	orrs	r3, r2
 1d6:	2203      	movs	r2, #3
 1d8:	4022      	ands	r2, r4
 1da:	0212      	lsls	r2, r2, #8
 1dc:	4803      	ldr	r0, [pc, #12]	; (1ec <system_clock_source_osc8m_set_config+0x38>)
 1de:	4003      	ands	r3, r0
 1e0:	4313      	orrs	r3, r2
 1e2:	620b      	str	r3, [r1, #32]
}
 1e4:	bd70      	pop	{r4, r5, r6, pc}
 1e6:	46c0      	nop			; (mov r8, r8)
 1e8:	40000800 	.word	0x40000800
 1ec:	fffffcff 	.word	0xfffffcff

000001f0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 1f0:	2808      	cmp	r0, #8
 1f2:	d803      	bhi.n	1fc <system_clock_source_enable+0xc>
 1f4:	0080      	lsls	r0, r0, #2
 1f6:	4b25      	ldr	r3, [pc, #148]	; (28c <system_clock_source_enable+0x9c>)
 1f8:	581b      	ldr	r3, [r3, r0]
 1fa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 1fc:	2017      	movs	r0, #23
 1fe:	e044      	b.n	28a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 200:	4a23      	ldr	r2, [pc, #140]	; (290 <system_clock_source_enable+0xa0>)
 202:	6a13      	ldr	r3, [r2, #32]
 204:	2102      	movs	r1, #2
 206:	430b      	orrs	r3, r1
 208:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 20a:	2000      	movs	r0, #0
 20c:	e03d      	b.n	28a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 20e:	4a20      	ldr	r2, [pc, #128]	; (290 <system_clock_source_enable+0xa0>)
 210:	6993      	ldr	r3, [r2, #24]
 212:	2102      	movs	r1, #2
 214:	430b      	orrs	r3, r1
 216:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 218:	2000      	movs	r0, #0
		break;
 21a:	e036      	b.n	28a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 21c:	4a1c      	ldr	r2, [pc, #112]	; (290 <system_clock_source_enable+0xa0>)
 21e:	8a13      	ldrh	r3, [r2, #16]
 220:	2102      	movs	r1, #2
 222:	430b      	orrs	r3, r1
 224:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 226:	2000      	movs	r0, #0
		break;
 228:	e02f      	b.n	28a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 22a:	4a19      	ldr	r2, [pc, #100]	; (290 <system_clock_source_enable+0xa0>)
 22c:	8a93      	ldrh	r3, [r2, #20]
 22e:	2102      	movs	r1, #2
 230:	430b      	orrs	r3, r1
 232:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 234:	2000      	movs	r0, #0
		break;
 236:	e028      	b.n	28a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 238:	4916      	ldr	r1, [pc, #88]	; (294 <system_clock_source_enable+0xa4>)
 23a:	680b      	ldr	r3, [r1, #0]
 23c:	2202      	movs	r2, #2
 23e:	4313      	orrs	r3, r2
 240:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 242:	4b13      	ldr	r3, [pc, #76]	; (290 <system_clock_source_enable+0xa0>)
 244:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 246:	0019      	movs	r1, r3
 248:	320e      	adds	r2, #14
 24a:	68cb      	ldr	r3, [r1, #12]
 24c:	421a      	tst	r2, r3
 24e:	d0fc      	beq.n	24a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 250:	4a10      	ldr	r2, [pc, #64]	; (294 <system_clock_source_enable+0xa4>)
 252:	6891      	ldr	r1, [r2, #8]
 254:	4b0e      	ldr	r3, [pc, #56]	; (290 <system_clock_source_enable+0xa0>)
 256:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 258:	6852      	ldr	r2, [r2, #4]
 25a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
 25c:	2200      	movs	r2, #0
 25e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 260:	0019      	movs	r1, r3
 262:	3210      	adds	r2, #16
 264:	68cb      	ldr	r3, [r1, #12]
 266:	421a      	tst	r2, r3
 268:	d0fc      	beq.n	264 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 26a:	4b0a      	ldr	r3, [pc, #40]	; (294 <system_clock_source_enable+0xa4>)
 26c:	681b      	ldr	r3, [r3, #0]
 26e:	b29b      	uxth	r3, r3
 270:	4a07      	ldr	r2, [pc, #28]	; (290 <system_clock_source_enable+0xa0>)
 272:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
 274:	2000      	movs	r0, #0
 276:	e008      	b.n	28a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 278:	4905      	ldr	r1, [pc, #20]	; (290 <system_clock_source_enable+0xa0>)
 27a:	2244      	movs	r2, #68	; 0x44
 27c:	5c8b      	ldrb	r3, [r1, r2]
 27e:	2002      	movs	r0, #2
 280:	4303      	orrs	r3, r0
 282:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
 284:	2000      	movs	r0, #0
		break;
 286:	e000      	b.n	28a <system_clock_source_enable+0x9a>
		return STATUS_OK;
 288:	2000      	movs	r0, #0
}
 28a:	4770      	bx	lr
 28c:	00000664 	.word	0x00000664
 290:	40000800 	.word	0x40000800
 294:	2000002c 	.word	0x2000002c

00000298 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 298:	b530      	push	{r4, r5, lr}
 29a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 29c:	22c2      	movs	r2, #194	; 0xc2
 29e:	00d2      	lsls	r2, r2, #3
 2a0:	4b1a      	ldr	r3, [pc, #104]	; (30c <system_clock_init+0x74>)
 2a2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 2a4:	4a1a      	ldr	r2, [pc, #104]	; (310 <system_clock_init+0x78>)
 2a6:	6853      	ldr	r3, [r2, #4]
 2a8:	211e      	movs	r1, #30
 2aa:	438b      	bics	r3, r1
 2ac:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 2ae:	2301      	movs	r3, #1
 2b0:	466a      	mov	r2, sp
 2b2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 2b4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 2b6:	4d17      	ldr	r5, [pc, #92]	; (314 <system_clock_init+0x7c>)
 2b8:	b2e0      	uxtb	r0, r4
 2ba:	4669      	mov	r1, sp
 2bc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 2be:	3401      	adds	r4, #1
 2c0:	2c25      	cmp	r4, #37	; 0x25
 2c2:	d1f9      	bne.n	2b8 <system_clock_init+0x20>
	config->run_in_standby  = false;
 2c4:	a803      	add	r0, sp, #12
 2c6:	2400      	movs	r4, #0
 2c8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 2ca:	2501      	movs	r5, #1
 2cc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 2ce:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 2d0:	4b11      	ldr	r3, [pc, #68]	; (318 <system_clock_init+0x80>)
 2d2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 2d4:	2006      	movs	r0, #6
 2d6:	4b11      	ldr	r3, [pc, #68]	; (31c <system_clock_init+0x84>)
 2d8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 2da:	4b11      	ldr	r3, [pc, #68]	; (320 <system_clock_init+0x88>)
 2dc:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 2de:	4b11      	ldr	r3, [pc, #68]	; (324 <system_clock_init+0x8c>)
 2e0:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 2e2:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 2e4:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 2e6:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 2e8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 2ea:	466b      	mov	r3, sp
 2ec:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 2ee:	2306      	movs	r3, #6
 2f0:	466a      	mov	r2, sp
 2f2:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 2f4:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 2f6:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 2f8:	4669      	mov	r1, sp
 2fa:	2000      	movs	r0, #0
 2fc:	4b0a      	ldr	r3, [pc, #40]	; (328 <system_clock_init+0x90>)
 2fe:	4798      	blx	r3
 300:	2000      	movs	r0, #0
 302:	4b0a      	ldr	r3, [pc, #40]	; (32c <system_clock_init+0x94>)
 304:	4798      	blx	r3
#endif
}
 306:	b005      	add	sp, #20
 308:	bd30      	pop	{r4, r5, pc}
 30a:	46c0      	nop			; (mov r8, r8)
 30c:	40000800 	.word	0x40000800
 310:	41004000 	.word	0x41004000
 314:	000004ad 	.word	0x000004ad
 318:	000001b5 	.word	0x000001b5
 31c:	000001f1 	.word	0x000001f1
 320:	00000331 	.word	0x00000331
 324:	40000400 	.word	0x40000400
 328:	00000355 	.word	0x00000355
 32c:	0000040d 	.word	0x0000040d

00000330 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 330:	4a06      	ldr	r2, [pc, #24]	; (34c <system_gclk_init+0x1c>)
 332:	6993      	ldr	r3, [r2, #24]
 334:	2108      	movs	r1, #8
 336:	430b      	orrs	r3, r1
 338:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 33a:	2201      	movs	r2, #1
 33c:	4b04      	ldr	r3, [pc, #16]	; (350 <system_gclk_init+0x20>)
 33e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 340:	0019      	movs	r1, r3
 342:	780b      	ldrb	r3, [r1, #0]
 344:	4213      	tst	r3, r2
 346:	d1fc      	bne.n	342 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 348:	4770      	bx	lr
 34a:	46c0      	nop			; (mov r8, r8)
 34c:	40000400 	.word	0x40000400
 350:	40000c00 	.word	0x40000c00

00000354 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 354:	b570      	push	{r4, r5, r6, lr}
 356:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 358:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 35a:	780d      	ldrb	r5, [r1, #0]
 35c:	022d      	lsls	r5, r5, #8
 35e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 360:	784b      	ldrb	r3, [r1, #1]
 362:	2b00      	cmp	r3, #0
 364:	d002      	beq.n	36c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 366:	2380      	movs	r3, #128	; 0x80
 368:	02db      	lsls	r3, r3, #11
 36a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 36c:	7a4b      	ldrb	r3, [r1, #9]
 36e:	2b00      	cmp	r3, #0
 370:	d002      	beq.n	378 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 372:	2380      	movs	r3, #128	; 0x80
 374:	031b      	lsls	r3, r3, #12
 376:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 378:	6848      	ldr	r0, [r1, #4]
 37a:	2801      	cmp	r0, #1
 37c:	d910      	bls.n	3a0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 37e:	1e43      	subs	r3, r0, #1
 380:	4218      	tst	r0, r3
 382:	d134      	bne.n	3ee <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 384:	2802      	cmp	r0, #2
 386:	d930      	bls.n	3ea <system_gclk_gen_set_config+0x96>
 388:	2302      	movs	r3, #2
 38a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 38c:	3201      	adds	r2, #1
						mask <<= 1) {
 38e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 390:	4298      	cmp	r0, r3
 392:	d8fb      	bhi.n	38c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 394:	0212      	lsls	r2, r2, #8
 396:	4332      	orrs	r2, r6
 398:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 39a:	2380      	movs	r3, #128	; 0x80
 39c:	035b      	lsls	r3, r3, #13
 39e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 3a0:	7a0b      	ldrb	r3, [r1, #8]
 3a2:	2b00      	cmp	r3, #0
 3a4:	d002      	beq.n	3ac <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 3a6:	2380      	movs	r3, #128	; 0x80
 3a8:	039b      	lsls	r3, r3, #14
 3aa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3ac:	4a13      	ldr	r2, [pc, #76]	; (3fc <system_gclk_gen_set_config+0xa8>)
 3ae:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 3b0:	b25b      	sxtb	r3, r3
 3b2:	2b00      	cmp	r3, #0
 3b4:	dbfb      	blt.n	3ae <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 3b6:	4b12      	ldr	r3, [pc, #72]	; (400 <system_gclk_gen_set_config+0xac>)
 3b8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 3ba:	4b12      	ldr	r3, [pc, #72]	; (404 <system_gclk_gen_set_config+0xb0>)
 3bc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3be:	4a0f      	ldr	r2, [pc, #60]	; (3fc <system_gclk_gen_set_config+0xa8>)
 3c0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 3c2:	b25b      	sxtb	r3, r3
 3c4:	2b00      	cmp	r3, #0
 3c6:	dbfb      	blt.n	3c0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 3c8:	4b0c      	ldr	r3, [pc, #48]	; (3fc <system_gclk_gen_set_config+0xa8>)
 3ca:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3cc:	001a      	movs	r2, r3
 3ce:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 3d0:	b25b      	sxtb	r3, r3
 3d2:	2b00      	cmp	r3, #0
 3d4:	dbfb      	blt.n	3ce <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 3d6:	4a09      	ldr	r2, [pc, #36]	; (3fc <system_gclk_gen_set_config+0xa8>)
 3d8:	6853      	ldr	r3, [r2, #4]
 3da:	2180      	movs	r1, #128	; 0x80
 3dc:	0249      	lsls	r1, r1, #9
 3de:	400b      	ands	r3, r1
 3e0:	431d      	orrs	r5, r3
 3e2:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 3e4:	4b08      	ldr	r3, [pc, #32]	; (408 <system_gclk_gen_set_config+0xb4>)
 3e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 3e8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 3ea:	2200      	movs	r2, #0
 3ec:	e7d2      	b.n	394 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 3ee:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 3f0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 3f2:	2380      	movs	r3, #128	; 0x80
 3f4:	029b      	lsls	r3, r3, #10
 3f6:	431d      	orrs	r5, r3
 3f8:	e7d2      	b.n	3a0 <system_gclk_gen_set_config+0x4c>
 3fa:	46c0      	nop			; (mov r8, r8)
 3fc:	40000c00 	.word	0x40000c00
 400:	00000145 	.word	0x00000145
 404:	40000c08 	.word	0x40000c08
 408:	00000185 	.word	0x00000185

0000040c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 40c:	b510      	push	{r4, lr}
 40e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 410:	4a0b      	ldr	r2, [pc, #44]	; (440 <system_gclk_gen_enable+0x34>)
 412:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 414:	b25b      	sxtb	r3, r3
 416:	2b00      	cmp	r3, #0
 418:	dbfb      	blt.n	412 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 41a:	4b0a      	ldr	r3, [pc, #40]	; (444 <system_gclk_gen_enable+0x38>)
 41c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 41e:	4b0a      	ldr	r3, [pc, #40]	; (448 <system_gclk_gen_enable+0x3c>)
 420:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 422:	4a07      	ldr	r2, [pc, #28]	; (440 <system_gclk_gen_enable+0x34>)
 424:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 426:	b25b      	sxtb	r3, r3
 428:	2b00      	cmp	r3, #0
 42a:	dbfb      	blt.n	424 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 42c:	4a04      	ldr	r2, [pc, #16]	; (440 <system_gclk_gen_enable+0x34>)
 42e:	6851      	ldr	r1, [r2, #4]
 430:	2380      	movs	r3, #128	; 0x80
 432:	025b      	lsls	r3, r3, #9
 434:	430b      	orrs	r3, r1
 436:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 438:	4b04      	ldr	r3, [pc, #16]	; (44c <system_gclk_gen_enable+0x40>)
 43a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 43c:	bd10      	pop	{r4, pc}
 43e:	46c0      	nop			; (mov r8, r8)
 440:	40000c00 	.word	0x40000c00
 444:	00000145 	.word	0x00000145
 448:	40000c04 	.word	0x40000c04
 44c:	00000185 	.word	0x00000185

00000450 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 450:	b510      	push	{r4, lr}
 452:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 454:	4b0f      	ldr	r3, [pc, #60]	; (494 <system_gclk_chan_disable+0x44>)
 456:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 458:	4b0f      	ldr	r3, [pc, #60]	; (498 <system_gclk_chan_disable+0x48>)
 45a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 45c:	4a0f      	ldr	r2, [pc, #60]	; (49c <system_gclk_chan_disable+0x4c>)
 45e:	8853      	ldrh	r3, [r2, #2]
 460:	051b      	lsls	r3, r3, #20
 462:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 464:	8853      	ldrh	r3, [r2, #2]
 466:	490e      	ldr	r1, [pc, #56]	; (4a0 <system_gclk_chan_disable+0x50>)
 468:	400b      	ands	r3, r1
 46a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 46c:	8853      	ldrh	r3, [r2, #2]
 46e:	490d      	ldr	r1, [pc, #52]	; (4a4 <system_gclk_chan_disable+0x54>)
 470:	400b      	ands	r3, r1
 472:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 474:	0011      	movs	r1, r2
 476:	2280      	movs	r2, #128	; 0x80
 478:	01d2      	lsls	r2, r2, #7
 47a:	884b      	ldrh	r3, [r1, #2]
 47c:	4213      	tst	r3, r2
 47e:	d1fc      	bne.n	47a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 480:	4906      	ldr	r1, [pc, #24]	; (49c <system_gclk_chan_disable+0x4c>)
 482:	884a      	ldrh	r2, [r1, #2]
 484:	0203      	lsls	r3, r0, #8
 486:	4806      	ldr	r0, [pc, #24]	; (4a0 <system_gclk_chan_disable+0x50>)
 488:	4002      	ands	r2, r0
 48a:	4313      	orrs	r3, r2
 48c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 48e:	4b06      	ldr	r3, [pc, #24]	; (4a8 <system_gclk_chan_disable+0x58>)
 490:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 492:	bd10      	pop	{r4, pc}
 494:	00000145 	.word	0x00000145
 498:	40000c02 	.word	0x40000c02
 49c:	40000c00 	.word	0x40000c00
 4a0:	fffff0ff 	.word	0xfffff0ff
 4a4:	ffffbfff 	.word	0xffffbfff
 4a8:	00000185 	.word	0x00000185

000004ac <system_gclk_chan_set_config>:
{
 4ac:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 4ae:	780c      	ldrb	r4, [r1, #0]
 4b0:	0224      	lsls	r4, r4, #8
 4b2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 4b4:	4b02      	ldr	r3, [pc, #8]	; (4c0 <system_gclk_chan_set_config+0x14>)
 4b6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 4b8:	b2a4      	uxth	r4, r4
 4ba:	4b02      	ldr	r3, [pc, #8]	; (4c4 <system_gclk_chan_set_config+0x18>)
 4bc:	805c      	strh	r4, [r3, #2]
}
 4be:	bd10      	pop	{r4, pc}
 4c0:	00000451 	.word	0x00000451
 4c4:	40000c00 	.word	0x40000c00

000004c8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 4c8:	4770      	bx	lr
	...

000004cc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 4cc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 4ce:	4b05      	ldr	r3, [pc, #20]	; (4e4 <system_init+0x18>)
 4d0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 4d2:	4b05      	ldr	r3, [pc, #20]	; (4e8 <system_init+0x1c>)
 4d4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 4d6:	4b05      	ldr	r3, [pc, #20]	; (4ec <system_init+0x20>)
 4d8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 4da:	4b05      	ldr	r3, [pc, #20]	; (4f0 <system_init+0x24>)
 4dc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 4de:	4b05      	ldr	r3, [pc, #20]	; (4f4 <system_init+0x28>)
 4e0:	4798      	blx	r3
}
 4e2:	bd10      	pop	{r4, pc}
 4e4:	00000299 	.word	0x00000299
 4e8:	00000141 	.word	0x00000141
 4ec:	000004c9 	.word	0x000004c9
 4f0:	000004c9 	.word	0x000004c9
 4f4:	000004c9 	.word	0x000004c9

000004f8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 4f8:	e7fe      	b.n	4f8 <Dummy_Handler>
	...

000004fc <Reset_Handler>:
{
 4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 4fe:	4a2a      	ldr	r2, [pc, #168]	; (5a8 <Reset_Handler+0xac>)
 500:	4b2a      	ldr	r3, [pc, #168]	; (5ac <Reset_Handler+0xb0>)
 502:	429a      	cmp	r2, r3
 504:	d011      	beq.n	52a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 506:	001a      	movs	r2, r3
 508:	4b29      	ldr	r3, [pc, #164]	; (5b0 <Reset_Handler+0xb4>)
 50a:	429a      	cmp	r2, r3
 50c:	d20d      	bcs.n	52a <Reset_Handler+0x2e>
 50e:	4a29      	ldr	r2, [pc, #164]	; (5b4 <Reset_Handler+0xb8>)
 510:	3303      	adds	r3, #3
 512:	1a9b      	subs	r3, r3, r2
 514:	089b      	lsrs	r3, r3, #2
 516:	3301      	adds	r3, #1
 518:	009b      	lsls	r3, r3, #2
 51a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 51c:	4823      	ldr	r0, [pc, #140]	; (5ac <Reset_Handler+0xb0>)
 51e:	4922      	ldr	r1, [pc, #136]	; (5a8 <Reset_Handler+0xac>)
 520:	588c      	ldr	r4, [r1, r2]
 522:	5084      	str	r4, [r0, r2]
 524:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 526:	429a      	cmp	r2, r3
 528:	d1fa      	bne.n	520 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 52a:	4a23      	ldr	r2, [pc, #140]	; (5b8 <Reset_Handler+0xbc>)
 52c:	4b23      	ldr	r3, [pc, #140]	; (5bc <Reset_Handler+0xc0>)
 52e:	429a      	cmp	r2, r3
 530:	d20a      	bcs.n	548 <Reset_Handler+0x4c>
 532:	43d3      	mvns	r3, r2
 534:	4921      	ldr	r1, [pc, #132]	; (5bc <Reset_Handler+0xc0>)
 536:	185b      	adds	r3, r3, r1
 538:	2103      	movs	r1, #3
 53a:	438b      	bics	r3, r1
 53c:	3304      	adds	r3, #4
 53e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 540:	2100      	movs	r1, #0
 542:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 544:	4293      	cmp	r3, r2
 546:	d1fc      	bne.n	542 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 548:	4a1d      	ldr	r2, [pc, #116]	; (5c0 <Reset_Handler+0xc4>)
 54a:	21ff      	movs	r1, #255	; 0xff
 54c:	4b1d      	ldr	r3, [pc, #116]	; (5c4 <Reset_Handler+0xc8>)
 54e:	438b      	bics	r3, r1
 550:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 552:	39fd      	subs	r1, #253	; 0xfd
 554:	2390      	movs	r3, #144	; 0x90
 556:	005b      	lsls	r3, r3, #1
 558:	4a1b      	ldr	r2, [pc, #108]	; (5c8 <Reset_Handler+0xcc>)
 55a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 55c:	4a1b      	ldr	r2, [pc, #108]	; (5cc <Reset_Handler+0xd0>)
 55e:	78d3      	ldrb	r3, [r2, #3]
 560:	2503      	movs	r5, #3
 562:	43ab      	bics	r3, r5
 564:	2402      	movs	r4, #2
 566:	4323      	orrs	r3, r4
 568:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 56a:	78d3      	ldrb	r3, [r2, #3]
 56c:	270c      	movs	r7, #12
 56e:	43bb      	bics	r3, r7
 570:	2608      	movs	r6, #8
 572:	4333      	orrs	r3, r6
 574:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 576:	4b16      	ldr	r3, [pc, #88]	; (5d0 <Reset_Handler+0xd4>)
 578:	7b98      	ldrb	r0, [r3, #14]
 57a:	2230      	movs	r2, #48	; 0x30
 57c:	4390      	bics	r0, r2
 57e:	2220      	movs	r2, #32
 580:	4310      	orrs	r0, r2
 582:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 584:	7b99      	ldrb	r1, [r3, #14]
 586:	43b9      	bics	r1, r7
 588:	4331      	orrs	r1, r6
 58a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 58c:	7b9a      	ldrb	r2, [r3, #14]
 58e:	43aa      	bics	r2, r5
 590:	4322      	orrs	r2, r4
 592:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 594:	4a0f      	ldr	r2, [pc, #60]	; (5d4 <Reset_Handler+0xd8>)
 596:	6853      	ldr	r3, [r2, #4]
 598:	2180      	movs	r1, #128	; 0x80
 59a:	430b      	orrs	r3, r1
 59c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 59e:	4b0e      	ldr	r3, [pc, #56]	; (5d8 <Reset_Handler+0xdc>)
 5a0:	4798      	blx	r3
        main();
 5a2:	4b0e      	ldr	r3, [pc, #56]	; (5dc <Reset_Handler+0xe0>)
 5a4:	4798      	blx	r3
 5a6:	e7fe      	b.n	5a6 <Reset_Handler+0xaa>
 5a8:	000006a8 	.word	0x000006a8
 5ac:	20000000 	.word	0x20000000
 5b0:	20000008 	.word	0x20000008
 5b4:	20000004 	.word	0x20000004
 5b8:	20000008 	.word	0x20000008
 5bc:	20000044 	.word	0x20000044
 5c0:	e000ed00 	.word	0xe000ed00
 5c4:	00000000 	.word	0x00000000
 5c8:	41007000 	.word	0x41007000
 5cc:	41005000 	.word	0x41005000
 5d0:	41004800 	.word	0x41004800
 5d4:	41004000 	.word	0x41004000
 5d8:	0000061d 	.word	0x0000061d
 5dc:	000005e1 	.word	0x000005e1

000005e0 <main>:
#include <asf.h>

#define LED0 IOPORT_CREATE_PIN(IOPORT_PORTA, 14)

int main (void)
{
 5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	system_init();
 5e2:	4b0b      	ldr	r3, [pc, #44]	; (610 <main+0x30>)
 5e4:	4798      	blx	r3
		enum ioport_direction dir)
{
	PortGroup *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
 5e6:	4c0b      	ldr	r4, [pc, #44]	; (614 <main+0x34>)
 5e8:	2580      	movs	r5, #128	; 0x80
 5ea:	01ed      	lsls	r5, r5, #7
 5ec:	60a5      	str	r5, [r4, #8]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
	}

	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
 5ee:	224e      	movs	r2, #78	; 0x4e
 5f0:	5ca3      	ldrb	r3, [r4, r2]
 5f2:	2102      	movs	r1, #2
 5f4:	430b      	orrs	r3, r1
 5f6:	54a3      	strb	r3, [r4, r2]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
 5f8:	61a5      	str	r5, [r4, #24]

	/* Insert application code here, after the board has been initialized. */
	ioport_init();	// call before using IOPORT service
	ioport_set_pin_dir(LED0, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(LED0, HIGH);
	delay_ms(500);
 5fa:	27fa      	movs	r7, #250	; 0xfa
 5fc:	007f      	lsls	r7, r7, #1
 5fe:	0038      	movs	r0, r7
 600:	4e05      	ldr	r6, [pc, #20]	; (618 <main+0x38>)
 602:	47b0      	blx	r6
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
 604:	6165      	str	r5, [r4, #20]
	ioport_set_pin_level(LED0, LOW);
	delay_ms(500);
 606:	0038      	movs	r0, r7
 608:	47b0      	blx	r6
}
 60a:	2000      	movs	r0, #0
 60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 60e:	46c0      	nop			; (mov r8, r8)
 610:	000004cd 	.word	0x000004cd
 614:	41004400 	.word	0x41004400
 618:	00000115 	.word	0x00000115

0000061c <__libc_init_array>:
 61c:	b570      	push	{r4, r5, r6, lr}
 61e:	2600      	movs	r6, #0
 620:	4d0c      	ldr	r5, [pc, #48]	; (654 <__libc_init_array+0x38>)
 622:	4c0d      	ldr	r4, [pc, #52]	; (658 <__libc_init_array+0x3c>)
 624:	1b64      	subs	r4, r4, r5
 626:	10a4      	asrs	r4, r4, #2
 628:	42a6      	cmp	r6, r4
 62a:	d109      	bne.n	640 <__libc_init_array+0x24>
 62c:	2600      	movs	r6, #0
 62e:	f000 f82b 	bl	688 <_init>
 632:	4d0a      	ldr	r5, [pc, #40]	; (65c <__libc_init_array+0x40>)
 634:	4c0a      	ldr	r4, [pc, #40]	; (660 <__libc_init_array+0x44>)
 636:	1b64      	subs	r4, r4, r5
 638:	10a4      	asrs	r4, r4, #2
 63a:	42a6      	cmp	r6, r4
 63c:	d105      	bne.n	64a <__libc_init_array+0x2e>
 63e:	bd70      	pop	{r4, r5, r6, pc}
 640:	00b3      	lsls	r3, r6, #2
 642:	58eb      	ldr	r3, [r5, r3]
 644:	4798      	blx	r3
 646:	3601      	adds	r6, #1
 648:	e7ee      	b.n	628 <__libc_init_array+0xc>
 64a:	00b3      	lsls	r3, r6, #2
 64c:	58eb      	ldr	r3, [r5, r3]
 64e:	4798      	blx	r3
 650:	3601      	adds	r6, #1
 652:	e7f2      	b.n	63a <__libc_init_array+0x1e>
 654:	00000694 	.word	0x00000694
 658:	00000694 	.word	0x00000694
 65c:	00000694 	.word	0x00000694
 660:	00000698 	.word	0x00000698
 664:	0000021c 	.word	0x0000021c
 668:	000001fc 	.word	0x000001fc
 66c:	000001fc 	.word	0x000001fc
 670:	00000288 	.word	0x00000288
 674:	0000020e 	.word	0x0000020e
 678:	0000022a 	.word	0x0000022a
 67c:	00000200 	.word	0x00000200
 680:	00000238 	.word	0x00000238
 684:	00000278 	.word	0x00000278

00000688 <_init>:
 688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 68a:	46c0      	nop			; (mov r8, r8)
 68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 68e:	bc08      	pop	{r3}
 690:	469e      	mov	lr, r3
 692:	4770      	bx	lr

00000694 <__init_array_start>:
 694:	000000dd 	.word	0x000000dd

00000698 <_fini>:
 698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 69a:	46c0      	nop			; (mov r8, r8)
 69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 69e:	bc08      	pop	{r3}
 6a0:	469e      	mov	lr, r3
 6a2:	4770      	bx	lr

000006a4 <__fini_array_start>:
 6a4:	000000b5 	.word	0x000000b5
