
SPI_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000830  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a28  08000a28  00010a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a34  08000a34  00010a3c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a34  08000a34  00010a3c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a34  08000a3c  00010a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a34  08000a34  00010a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a38  08000a38  00010a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a3c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a3c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010a3c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003064  00000000  00000000  00010a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000734  00000000  00000000  00013ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000180  00000000  00000000  00014208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000138  00000000  00000000  00014388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d413  00000000  00000000  000144c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001bb5  00000000  00000000  000318d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a44ef  00000000  00000000  00033488  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7977  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004f8  00000000  00000000  000d79f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000a10 	.word	0x08000a10

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000a10 	.word	0x08000a10

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <EXTI_interruptHandler>:

	}

}

void EXTI_interruptHandler(uint8_t pinNumber){
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]

	/* NOTE: Clear the PR bit */
	if(EXTI->PR & (0x00000001U << pinNumber)){
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <EXTI_interruptHandler+0x3c>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2101      	movs	r1, #1
 800025a:	fa01 f303 	lsl.w	r3, r1, r3
 800025e:	4013      	ands	r3, r2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d008      	beq.n	8000276 <EXTI_interruptHandler+0x2e>

		EXTI->PR |= (0x00000001U << pinNumber);
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <EXTI_interruptHandler+0x3c>)
 8000266:	695a      	ldr	r2, [r3, #20]
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	2101      	movs	r1, #1
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	4904      	ldr	r1, [pc, #16]	; (8000284 <EXTI_interruptHandler+0x3c>)
 8000272:	4313      	orrs	r3, r2
 8000274:	614b      	str	r3, [r1, #20]

	}

}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40013c00 	.word	0x40013c00

08000288 <GPIO_clkCntrl>:
#include "util.h"
#include "GPIO_driver.h"
#include "EXTI_driver.h"
#include "RCC_driver.h"

void GPIO_clkCntrl(GPIO_TypeDef *pBaseAddress, UTIL_enableDisable_e enableDisable){
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	70fb      	strb	r3, [r7, #3]

	switch(enableDisable){
 8000294:	78fb      	ldrb	r3, [r7, #3]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d07b      	beq.n	8000392 <GPIO_clkCntrl+0x10a>
 800029a:	2b01      	cmp	r3, #1
 800029c:	d000      	beq.n	80002a0 <GPIO_clkCntrl+0x18>
		else if(pBaseAddress == GPIOJ){ GPIOJ_CLK_DIS; }
		else if(pBaseAddress == GPIOK){ GPIOK_CLK_DIS; }
		break;

	default:
		break;
 800029e:	e0f4      	b.n	800048a <GPIO_clkCntrl+0x202>
		if(pBaseAddress == GPIOA){ GPIOA_CLK_EN; }
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a7d      	ldr	r2, [pc, #500]	; (8000498 <GPIO_clkCntrl+0x210>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIO_clkCntrl+0x2e>
 80002a8:	4b7c      	ldr	r3, [pc, #496]	; (800049c <GPIO_clkCntrl+0x214>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a7b      	ldr	r2, [pc, #492]	; (800049c <GPIO_clkCntrl+0x214>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80002b4:	e0e6      	b.n	8000484 <GPIO_clkCntrl+0x1fc>
		else if(pBaseAddress == GPIOB){ GPIOB_CLK_EN; }
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a79      	ldr	r2, [pc, #484]	; (80004a0 <GPIO_clkCntrl+0x218>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_clkCntrl+0x44>
 80002be:	4b77      	ldr	r3, [pc, #476]	; (800049c <GPIO_clkCntrl+0x214>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	4a76      	ldr	r2, [pc, #472]	; (800049c <GPIO_clkCntrl+0x214>)
 80002c4:	f043 0302 	orr.w	r3, r3, #2
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80002ca:	e0db      	b.n	8000484 <GPIO_clkCntrl+0x1fc>
		else if(pBaseAddress == GPIOC){ GPIOC_CLK_EN; }
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a75      	ldr	r2, [pc, #468]	; (80004a4 <GPIO_clkCntrl+0x21c>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_clkCntrl+0x5a>
 80002d4:	4b71      	ldr	r3, [pc, #452]	; (800049c <GPIO_clkCntrl+0x214>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d8:	4a70      	ldr	r2, [pc, #448]	; (800049c <GPIO_clkCntrl+0x214>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80002e0:	e0d0      	b.n	8000484 <GPIO_clkCntrl+0x1fc>
		else if(pBaseAddress == GPIOD){ GPIOD_CLK_EN; }
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a70      	ldr	r2, [pc, #448]	; (80004a8 <GPIO_clkCntrl+0x220>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <GPIO_clkCntrl+0x70>
 80002ea:	4b6c      	ldr	r3, [pc, #432]	; (800049c <GPIO_clkCntrl+0x214>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ee:	4a6b      	ldr	r2, [pc, #428]	; (800049c <GPIO_clkCntrl+0x214>)
 80002f0:	f043 0308 	orr.w	r3, r3, #8
 80002f4:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80002f6:	e0c5      	b.n	8000484 <GPIO_clkCntrl+0x1fc>
		else if(pBaseAddress == GPIOE){ GPIOE_CLK_EN; }
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a6c      	ldr	r2, [pc, #432]	; (80004ac <GPIO_clkCntrl+0x224>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d106      	bne.n	800030e <GPIO_clkCntrl+0x86>
 8000300:	4b66      	ldr	r3, [pc, #408]	; (800049c <GPIO_clkCntrl+0x214>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4a65      	ldr	r2, [pc, #404]	; (800049c <GPIO_clkCntrl+0x214>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 800030c:	e0ba      	b.n	8000484 <GPIO_clkCntrl+0x1fc>
		else if(pBaseAddress == GPIOF){ GPIOF_CLK_EN; }
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a67      	ldr	r2, [pc, #412]	; (80004b0 <GPIO_clkCntrl+0x228>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_clkCntrl+0x9c>
 8000316:	4b61      	ldr	r3, [pc, #388]	; (800049c <GPIO_clkCntrl+0x214>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031a:	4a60      	ldr	r2, [pc, #384]	; (800049c <GPIO_clkCntrl+0x214>)
 800031c:	f043 0320 	orr.w	r3, r3, #32
 8000320:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000322:	e0af      	b.n	8000484 <GPIO_clkCntrl+0x1fc>
		else if(pBaseAddress == GPIOG){ GPIOG_CLK_EN; }
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a63      	ldr	r2, [pc, #396]	; (80004b4 <GPIO_clkCntrl+0x22c>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_clkCntrl+0xb2>
 800032c:	4b5b      	ldr	r3, [pc, #364]	; (800049c <GPIO_clkCntrl+0x214>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a5a      	ldr	r2, [pc, #360]	; (800049c <GPIO_clkCntrl+0x214>)
 8000332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000336:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000338:	e0a4      	b.n	8000484 <GPIO_clkCntrl+0x1fc>
		else if(pBaseAddress == GPIOH){ GPIOH_CLK_EN; }
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a5e      	ldr	r2, [pc, #376]	; (80004b8 <GPIO_clkCntrl+0x230>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_clkCntrl+0xc8>
 8000342:	4b56      	ldr	r3, [pc, #344]	; (800049c <GPIO_clkCntrl+0x214>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a55      	ldr	r2, [pc, #340]	; (800049c <GPIO_clkCntrl+0x214>)
 8000348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034c:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 800034e:	e099      	b.n	8000484 <GPIO_clkCntrl+0x1fc>
		else if(pBaseAddress == GPIOI){ GPIOI_CLK_EN; }
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a5a      	ldr	r2, [pc, #360]	; (80004bc <GPIO_clkCntrl+0x234>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_clkCntrl+0xde>
 8000358:	4b50      	ldr	r3, [pc, #320]	; (800049c <GPIO_clkCntrl+0x214>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a4f      	ldr	r2, [pc, #316]	; (800049c <GPIO_clkCntrl+0x214>)
 800035e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000364:	e08e      	b.n	8000484 <GPIO_clkCntrl+0x1fc>
		else if(pBaseAddress == GPIOJ){ GPIOJ_CLK_EN; }
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a55      	ldr	r2, [pc, #340]	; (80004c0 <GPIO_clkCntrl+0x238>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_clkCntrl+0xf4>
 800036e:	4b4b      	ldr	r3, [pc, #300]	; (800049c <GPIO_clkCntrl+0x214>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a4a      	ldr	r2, [pc, #296]	; (800049c <GPIO_clkCntrl+0x214>)
 8000374:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 800037a:	e083      	b.n	8000484 <GPIO_clkCntrl+0x1fc>
		else if(pBaseAddress == GPIOK){ GPIOK_CLK_EN; }
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a51      	ldr	r2, [pc, #324]	; (80004c4 <GPIO_clkCntrl+0x23c>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d17f      	bne.n	8000484 <GPIO_clkCntrl+0x1fc>
 8000384:	4b45      	ldr	r3, [pc, #276]	; (800049c <GPIO_clkCntrl+0x214>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a44      	ldr	r2, [pc, #272]	; (800049c <GPIO_clkCntrl+0x214>)
 800038a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000390:	e078      	b.n	8000484 <GPIO_clkCntrl+0x1fc>
		if(pBaseAddress == GPIOA){ GPIOA_CLK_DIS; }
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a40      	ldr	r2, [pc, #256]	; (8000498 <GPIO_clkCntrl+0x210>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_clkCntrl+0x120>
 800039a:	4b40      	ldr	r3, [pc, #256]	; (800049c <GPIO_clkCntrl+0x214>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a3f      	ldr	r2, [pc, #252]	; (800049c <GPIO_clkCntrl+0x214>)
 80003a0:	f023 0301 	bic.w	r3, r3, #1
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80003a6:	e06f      	b.n	8000488 <GPIO_clkCntrl+0x200>
		else if(pBaseAddress == GPIOB){ GPIOB_CLK_DIS; }
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a3d      	ldr	r2, [pc, #244]	; (80004a0 <GPIO_clkCntrl+0x218>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_clkCntrl+0x136>
 80003b0:	4b3a      	ldr	r3, [pc, #232]	; (800049c <GPIO_clkCntrl+0x214>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a39      	ldr	r2, [pc, #228]	; (800049c <GPIO_clkCntrl+0x214>)
 80003b6:	f023 0302 	bic.w	r3, r3, #2
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80003bc:	e064      	b.n	8000488 <GPIO_clkCntrl+0x200>
		else if(pBaseAddress == GPIOC){ GPIOC_CLK_DIS; }
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a38      	ldr	r2, [pc, #224]	; (80004a4 <GPIO_clkCntrl+0x21c>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_clkCntrl+0x14c>
 80003c6:	4b35      	ldr	r3, [pc, #212]	; (800049c <GPIO_clkCntrl+0x214>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a34      	ldr	r2, [pc, #208]	; (800049c <GPIO_clkCntrl+0x214>)
 80003cc:	f023 0304 	bic.w	r3, r3, #4
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80003d2:	e059      	b.n	8000488 <GPIO_clkCntrl+0x200>
		else if(pBaseAddress == GPIOD){ GPIOD_CLK_DIS; }
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a34      	ldr	r2, [pc, #208]	; (80004a8 <GPIO_clkCntrl+0x220>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_clkCntrl+0x162>
 80003dc:	4b2f      	ldr	r3, [pc, #188]	; (800049c <GPIO_clkCntrl+0x214>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a2e      	ldr	r2, [pc, #184]	; (800049c <GPIO_clkCntrl+0x214>)
 80003e2:	f023 0308 	bic.w	r3, r3, #8
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80003e8:	e04e      	b.n	8000488 <GPIO_clkCntrl+0x200>
		else if(pBaseAddress == GPIOE){ GPIOE_CLK_DIS; }
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a2f      	ldr	r2, [pc, #188]	; (80004ac <GPIO_clkCntrl+0x224>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_clkCntrl+0x178>
 80003f2:	4b2a      	ldr	r3, [pc, #168]	; (800049c <GPIO_clkCntrl+0x214>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a29      	ldr	r2, [pc, #164]	; (800049c <GPIO_clkCntrl+0x214>)
 80003f8:	f023 0310 	bic.w	r3, r3, #16
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80003fe:	e043      	b.n	8000488 <GPIO_clkCntrl+0x200>
		else if(pBaseAddress == GPIOF){ GPIOF_CLK_DIS; }
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a2b      	ldr	r2, [pc, #172]	; (80004b0 <GPIO_clkCntrl+0x228>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_clkCntrl+0x18e>
 8000408:	4b24      	ldr	r3, [pc, #144]	; (800049c <GPIO_clkCntrl+0x214>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a23      	ldr	r2, [pc, #140]	; (800049c <GPIO_clkCntrl+0x214>)
 800040e:	f023 0320 	bic.w	r3, r3, #32
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000414:	e038      	b.n	8000488 <GPIO_clkCntrl+0x200>
		else if(pBaseAddress == GPIOG){ GPIOG_CLK_DIS; }
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a26      	ldr	r2, [pc, #152]	; (80004b4 <GPIO_clkCntrl+0x22c>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_clkCntrl+0x1a4>
 800041e:	4b1f      	ldr	r3, [pc, #124]	; (800049c <GPIO_clkCntrl+0x214>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a1e      	ldr	r2, [pc, #120]	; (800049c <GPIO_clkCntrl+0x214>)
 8000424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 800042a:	e02d      	b.n	8000488 <GPIO_clkCntrl+0x200>
		else if(pBaseAddress == GPIOH){ GPIOH_CLK_DIS; }
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a22      	ldr	r2, [pc, #136]	; (80004b8 <GPIO_clkCntrl+0x230>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_clkCntrl+0x1ba>
 8000434:	4b19      	ldr	r3, [pc, #100]	; (800049c <GPIO_clkCntrl+0x214>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a18      	ldr	r2, [pc, #96]	; (800049c <GPIO_clkCntrl+0x214>)
 800043a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000440:	e022      	b.n	8000488 <GPIO_clkCntrl+0x200>
		else if(pBaseAddress == GPIOI){ GPIOI_CLK_DIS; }
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a1d      	ldr	r2, [pc, #116]	; (80004bc <GPIO_clkCntrl+0x234>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_clkCntrl+0x1d0>
 800044a:	4b14      	ldr	r3, [pc, #80]	; (800049c <GPIO_clkCntrl+0x214>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a13      	ldr	r2, [pc, #76]	; (800049c <GPIO_clkCntrl+0x214>)
 8000450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000456:	e017      	b.n	8000488 <GPIO_clkCntrl+0x200>
		else if(pBaseAddress == GPIOJ){ GPIOJ_CLK_DIS; }
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a19      	ldr	r2, [pc, #100]	; (80004c0 <GPIO_clkCntrl+0x238>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_clkCntrl+0x1e6>
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <GPIO_clkCntrl+0x214>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a0d      	ldr	r2, [pc, #52]	; (800049c <GPIO_clkCntrl+0x214>)
 8000466:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 800046c:	e00c      	b.n	8000488 <GPIO_clkCntrl+0x200>
		else if(pBaseAddress == GPIOK){ GPIOK_CLK_DIS; }
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <GPIO_clkCntrl+0x23c>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d108      	bne.n	8000488 <GPIO_clkCntrl+0x200>
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <GPIO_clkCntrl+0x214>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <GPIO_clkCntrl+0x214>)
 800047c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000482:	e001      	b.n	8000488 <GPIO_clkCntrl+0x200>
		break;
 8000484:	bf00      	nop
 8000486:	e000      	b.n	800048a <GPIO_clkCntrl+0x202>
		break;
 8000488:	bf00      	nop

	}

}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40020000 	.word	0x40020000
 800049c:	40023800 	.word	0x40023800
 80004a0:	40020400 	.word	0x40020400
 80004a4:	40020800 	.word	0x40020800
 80004a8:	40020c00 	.word	0x40020c00
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40021400 	.word	0x40021400
 80004b4:	40021800 	.word	0x40021800
 80004b8:	40021c00 	.word	0x40021c00
 80004bc:	40022000 	.word	0x40022000
 80004c0:	40022400 	.word	0x40022400
 80004c4:	40022800 	.word	0x40022800

080004c8 <GPIO_init>:

void GPIO_init(GPIO_handle_s *GPIO_handle){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

	/* NOTE: GPIO Mode Register */
	GPIO_handle->pBaseAddress->MODER &= ~(GPIO_MODER_MODER0_Msk << (2 * GPIO_handle->config.pinNumber));
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6819      	ldr	r1, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	791b      	ldrb	r3, [r3, #4]
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	2203      	movs	r2, #3
 80004de:	fa02 f303 	lsl.w	r3, r2, r3
 80004e2:	43da      	mvns	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	400a      	ands	r2, r1
 80004ea:	601a      	str	r2, [r3, #0]
	GPIO_handle->pBaseAddress->MODER |= (GPIO_handle->config.pinMode) << (2 * GPIO_handle->config.pinNumber);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	795b      	ldrb	r3, [r3, #5]
 80004f6:	4619      	mov	r1, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	791b      	ldrb	r3, [r3, #4]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	4619      	mov	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	430a      	orrs	r2, r1
 800050a:	601a      	str	r2, [r3, #0]

	/* NOTE: GPIO Output Type Register */
	GPIO_handle->pBaseAddress->OTYPER &= ~(GPIO_OTYPER_OT_0 << GPIO_handle->config.pinNumber);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6859      	ldr	r1, [r3, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	461a      	mov	r2, r3
 8000518:	2301      	movs	r3, #1
 800051a:	4093      	lsls	r3, r2
 800051c:	43da      	mvns	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	400a      	ands	r2, r1
 8000524:	605a      	str	r2, [r3, #4]
	GPIO_handle->pBaseAddress->OTYPER |= (GPIO_handle->config.pinOutType << GPIO_handle->config.pinNumber);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	685a      	ldr	r2, [r3, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7a1b      	ldrb	r3, [r3, #8]
 8000530:	4619      	mov	r1, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	4619      	mov	r1, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	430a      	orrs	r2, r1
 8000542:	605a      	str	r2, [r3, #4]

	/* NOTE: GPIO Output Speed Register */
	GPIO_handle->pBaseAddress->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0_Msk << (2 * GPIO_handle->config.pinNumber));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	6899      	ldr	r1, [r3, #8]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	2203      	movs	r2, #3
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	43da      	mvns	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	400a      	ands	r2, r1
 800055e:	609a      	str	r2, [r3, #8]
	GPIO_handle->pBaseAddress->OSPEEDR |= (GPIO_handle->config.pinSpeed) << (2 * GPIO_handle->config.pinNumber);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	689a      	ldr	r2, [r3, #8]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	799b      	ldrb	r3, [r3, #6]
 800056a:	4619      	mov	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	4619      	mov	r1, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	430a      	orrs	r2, r1
 800057e:	609a      	str	r2, [r3, #8]

	/* NOTE: GPIO PullUpDown Register */
	GPIO_handle->pBaseAddress->PUPDR &= ~(GPIO_PUPDR_PUPDR0_Msk << (2 * GPIO_handle->config.pinNumber));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	68d9      	ldr	r1, [r3, #12]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	2203      	movs	r2, #3
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43da      	mvns	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	400a      	ands	r2, r1
 800059a:	60da      	str	r2, [r3, #12]
	GPIO_handle->pBaseAddress->PUPDR |= (GPIO_handle->config.pinPuPd) << (2 * GPIO_handle->config.pinNumber);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	68da      	ldr	r2, [r3, #12]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	79db      	ldrb	r3, [r3, #7]
 80005a6:	4619      	mov	r1, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	fa01 f303 	lsl.w	r3, r1, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	60da      	str	r2, [r3, #12]

	if(GPIO_ALTERFUNC == GPIO_handle->config.pinMode){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	795b      	ldrb	r3, [r3, #5]
 80005c0:	2b10      	cmp	r3, #16
 80005c2:	d146      	bne.n	8000652 <GPIO_init+0x18a>

		if(GPIO_handle->config.pinNumber < 8){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	2b07      	cmp	r3, #7
 80005ca:	d81e      	bhi.n	800060a <GPIO_init+0x142>

			/* NOTE: GPIO Alternate Function Low Register */
			GPIO_handle->pBaseAddress->AFR[0] &= ~(GPIO_AFRL_AFRL0_Msk << (4 * GPIO_handle->config.pinNumber));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a19      	ldr	r1, [r3, #32]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	220f      	movs	r2, #15
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	43da      	mvns	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	400a      	ands	r2, r1
 80005e6:	621a      	str	r2, [r3, #32]
			GPIO_handle->pBaseAddress->AFR[0] |= GPIO_handle->config.pinAltFuncMode << (4 * GPIO_handle->config.pinNumber);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6a1a      	ldr	r2, [r3, #32]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	7a5b      	ldrb	r3, [r3, #9]
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	791b      	ldrb	r3, [r3, #4]
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	4619      	mov	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	430a      	orrs	r2, r1
 8000606:	621a      	str	r2, [r3, #32]

		}

	}

}
 8000608:	e023      	b.n	8000652 <GPIO_init+0x18a>
		}else if(GPIO_handle->config.pinNumber >= 8){
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	2b07      	cmp	r3, #7
 8000610:	d91f      	bls.n	8000652 <GPIO_init+0x18a>
			GPIO_handle->pBaseAddress->AFR[1] &= ~(GPIO_AFRH_AFRH0_Msk << (4 * (GPIO_handle->config.pinNumber - 8)));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	3b08      	subs	r3, #8
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	220f      	movs	r2, #15
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	43da      	mvns	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	400a      	ands	r2, r1
 800062e:	625a      	str	r2, [r3, #36]	; 0x24
			GPIO_handle->pBaseAddress->AFR[1] |= GPIO_handle->config.pinAltFuncMode << (4 * (GPIO_handle->config.pinNumber - 8));
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7a5b      	ldrb	r3, [r3, #9]
 800063a:	4619      	mov	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	791b      	ldrb	r3, [r3, #4]
 8000640:	3b08      	subs	r3, #8
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	fa01 f303 	lsl.w	r3, r1, r3
 8000648:	4619      	mov	r1, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	430a      	orrs	r2, r1
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <GPIO_togglePin>:

	pBaseAddress->ODR = portValue;

}

void GPIO_togglePin(GPIO_TypeDef *pBaseAddress, uint8_t pinNumber){
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	460b      	mov	r3, r1
 8000668:	70fb      	strb	r3, [r7, #3]

	pBaseAddress->ODR ^= (GPIO_BSRR_BS_0 << pinNumber);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	2101      	movs	r1, #1
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	405a      	eors	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	615a      	str	r2, [r3, #20]

}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <SPI_clkCntrl>:
#include "RCC_driver.h"
#include "SPI_driver.h"

static UTIL_SETRESET_e SPI_getFlagStatus(SPI_handle_s *SPI_handle, SPI_FLAG_e SPI_flag);

void SPI_clkCntrl(SPI_TypeDef *pBaseAddress, UTIL_enableDisable_e enableDisable){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]

	switch(enableDisable){
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d02e      	beq.n	80006f8 <SPI_clkCntrl+0x70>
 800069a:	2b01      	cmp	r3, #1
 800069c:	d000      	beq.n	80006a0 <SPI_clkCntrl+0x18>
		else if(pBaseAddress == SPI3){ SPI3_CLK_DIS; }
		else if(pBaseAddress == SPI4){ SPI4_CLK_DIS; }
		break;

	default:
		break;
 800069e:	e05a      	b.n	8000756 <SPI_clkCntrl+0xce>
		if(pBaseAddress == SPI1){ SPI1_CLK_EN; }
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a30      	ldr	r2, [pc, #192]	; (8000764 <SPI_clkCntrl+0xdc>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d106      	bne.n	80006b6 <SPI_clkCntrl+0x2e>
 80006a8:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <SPI_clkCntrl+0xe0>)
 80006aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ac:	4a2e      	ldr	r2, [pc, #184]	; (8000768 <SPI_clkCntrl+0xe0>)
 80006ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006b2:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 80006b4:	e04c      	b.n	8000750 <SPI_clkCntrl+0xc8>
		else if(pBaseAddress == SPI2){ SPI2_CLK_EN; }
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a2c      	ldr	r2, [pc, #176]	; (800076c <SPI_clkCntrl+0xe4>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <SPI_clkCntrl+0x44>
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <SPI_clkCntrl+0xe0>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a29      	ldr	r2, [pc, #164]	; (8000768 <SPI_clkCntrl+0xe0>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80006ca:	e041      	b.n	8000750 <SPI_clkCntrl+0xc8>
		else if(pBaseAddress == SPI3){ SPI3_CLK_EN; }
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a28      	ldr	r2, [pc, #160]	; (8000770 <SPI_clkCntrl+0xe8>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d106      	bne.n	80006e2 <SPI_clkCntrl+0x5a>
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <SPI_clkCntrl+0xe0>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a23      	ldr	r2, [pc, #140]	; (8000768 <SPI_clkCntrl+0xe0>)
 80006da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80006e0:	e036      	b.n	8000750 <SPI_clkCntrl+0xc8>
		else if(pBaseAddress == SPI4){ SPI4_CLK_EN; }
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a23      	ldr	r2, [pc, #140]	; (8000774 <SPI_clkCntrl+0xec>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d132      	bne.n	8000750 <SPI_clkCntrl+0xc8>
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SPI_clkCntrl+0xe0>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <SPI_clkCntrl+0xe0>)
 80006f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006f4:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 80006f6:	e02b      	b.n	8000750 <SPI_clkCntrl+0xc8>
		if(pBaseAddress == SPI1){ SPI1_CLK_DIS; }
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a1a      	ldr	r2, [pc, #104]	; (8000764 <SPI_clkCntrl+0xdc>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <SPI_clkCntrl+0x86>
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <SPI_clkCntrl+0xe0>)
 8000702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000704:	4a18      	ldr	r2, [pc, #96]	; (8000768 <SPI_clkCntrl+0xe0>)
 8000706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800070a:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 800070c:	e022      	b.n	8000754 <SPI_clkCntrl+0xcc>
		else if(pBaseAddress == SPI2){ SPI2_CLK_DIS; }
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a16      	ldr	r2, [pc, #88]	; (800076c <SPI_clkCntrl+0xe4>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <SPI_clkCntrl+0x9c>
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <SPI_clkCntrl+0xe0>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <SPI_clkCntrl+0xe0>)
 800071c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000720:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000722:	e017      	b.n	8000754 <SPI_clkCntrl+0xcc>
		else if(pBaseAddress == SPI3){ SPI3_CLK_DIS; }
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <SPI_clkCntrl+0xe8>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d106      	bne.n	800073a <SPI_clkCntrl+0xb2>
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <SPI_clkCntrl+0xe0>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <SPI_clkCntrl+0xe0>)
 8000732:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000738:	e00c      	b.n	8000754 <SPI_clkCntrl+0xcc>
		else if(pBaseAddress == SPI4){ SPI4_CLK_DIS; }
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <SPI_clkCntrl+0xec>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d108      	bne.n	8000754 <SPI_clkCntrl+0xcc>
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <SPI_clkCntrl+0xe0>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <SPI_clkCntrl+0xe0>)
 8000748:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800074c:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 800074e:	e001      	b.n	8000754 <SPI_clkCntrl+0xcc>
		break;
 8000750:	bf00      	nop
 8000752:	e000      	b.n	8000756 <SPI_clkCntrl+0xce>
		break;
 8000754:	bf00      	nop

	}

}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40013000 	.word	0x40013000
 8000768:	40023800 	.word	0x40023800
 800076c:	40003800 	.word	0x40003800
 8000770:	40003c00 	.word	0x40003c00
 8000774:	40013400 	.word	0x40013400

08000778 <SPI_periphCntrl>:

	/* NOTE: End of the configuration of CR2 register */

}

void SPI_periphCntrl(SPI_handle_s *SPI_handle, UTIL_enableDisable_e UTIL_enableDisable){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]

	if(SPI_handle == NULL)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d017      	beq.n	80007ba <SPI_periphCntrl+0x42>
		return;

	switch(UTIL_enableDisable){
 800078a:	78fb      	ldrb	r3, [r7, #3]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00b      	beq.n	80007a8 <SPI_periphCntrl+0x30>
 8000790:	2b01      	cmp	r3, #1
 8000792:	d000      	beq.n	8000796 <SPI_periphCntrl+0x1e>

		break;

		default:

			return;
 8000794:	e012      	b.n	80007bc <SPI_periphCntrl+0x44>
			SPI_handle->pBaseAddress->CR1 |= SPI_CR1_SPE;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007a4:	601a      	str	r2, [r3, #0]
		break;
 80007a6:	e009      	b.n	80007bc <SPI_periphCntrl+0x44>
			SPI_handle->pBaseAddress->CR1 &= ~SPI_CR1_SPE;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80007b6:	601a      	str	r2, [r3, #0]
		break;
 80007b8:	e000      	b.n	80007bc <SPI_periphCntrl+0x44>
		return;
 80007ba:	bf00      	nop
			/* TODO: Error Handler */

	}

}
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <SPI_sendData>:

void SPI_sendData(SPI_handle_s *SPI_handle, uint8_t *txBuffer, uint8_t len){
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b084      	sub	sp, #16
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	60f8      	str	r0, [r7, #12]
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71fb      	strb	r3, [r7, #7]

	if(SPI_handle == NULL || txBuffer == NULL || !len)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d03f      	beq.n	800085a <SPI_sendData+0x94>
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d03c      	beq.n	800085a <SPI_sendData+0x94>
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d039      	beq.n	800085a <SPI_sendData+0x94>
		return;

	while(len){
 80007e6:	e034      	b.n	8000852 <SPI_sendData+0x8c>

		/* NOTE: Wait the TXE Flag */
		while(!SPI_getFlagStatus(SPI_handle, SPI_FLAG_TXE));
 80007e8:	bf00      	nop
 80007ea:	2102      	movs	r1, #2
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f000 f838 	bl	8000862 <SPI_getFlagStatus>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0f8      	beq.n	80007ea <SPI_sendData+0x24>

		/* NOTE: Check SPI data size and load data to DR */
		switch(SPI_handle->pBaseAddress->CR2 & SPI_DATAFORMAT_16BIT){
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000802:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000806:	d003      	beq.n	8000810 <SPI_sendData+0x4a>
 8000808:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800080c:	d015      	beq.n	800083a <SPI_sendData+0x74>

			break;

			default:

				return;
 800080e:	e025      	b.n	800085c <SPI_sendData+0x96>
				*((__IO uint8_t *)&SPI_handle->pBaseAddress->DR) = *txBuffer;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	330c      	adds	r3, #12
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	701a      	strb	r2, [r3, #0]
				while(!SPI_getFlagStatus(SPI_handle, SPI_FLAG_TXE));
 800081c:	bf00      	nop
 800081e:	2102      	movs	r1, #2
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f000 f81e 	bl	8000862 <SPI_getFlagStatus>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f8      	beq.n	800081e <SPI_sendData+0x58>
				len--;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	3b01      	subs	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
				txBuffer++;
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	3301      	adds	r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
			break;
 8000838:	e00b      	b.n	8000852 <SPI_sendData+0x8c>
				SPI_handle->pBaseAddress->DR = *(uint16_t *)txBuffer;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	60da      	str	r2, [r3, #12]
				len--;
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	3b01      	subs	r3, #1
 8000848:	71fb      	strb	r3, [r7, #7]
				txBuffer++;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	3301      	adds	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
			break;
 8000850:	bf00      	nop
	while(len){
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1c7      	bne.n	80007e8 <SPI_sendData+0x22>
 8000858:	e000      	b.n	800085c <SPI_sendData+0x96>
		return;
 800085a:	bf00      	nop

		}

	}

}
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <SPI_getFlagStatus>:

static UTIL_SETRESET_e SPI_getFlagStatus(SPI_handle_s *SPI_handle, SPI_FLAG_e SPI_flag){
 8000862:	b480      	push	{r7}
 8000864:	b085      	sub	sp, #20
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	460b      	mov	r3, r1
 800086c:	70fb      	strb	r3, [r7, #3]

	if(SPI_handle == NULL)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d00c      	beq.n	800088e <SPI_getFlagStatus+0x2c>
		return;

	UTIL_SETRESET_e flagStatus = RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]

	if(SPI_handle->pBaseAddress->SR & SPI_flag)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	4013      	ands	r3, r2
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SPI_getFlagStatus+0x28>
		flagStatus = SET;
 8000886:	2301      	movs	r3, #1
 8000888:	73fb      	strb	r3, [r7, #15]

	return flagStatus;
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	e001      	b.n	8000892 <SPI_getFlagStatus+0x30>
		return;
 800088e:	bf00      	nop
 8000890:	bf00      	nop

}
 8000892:	4618      	mov	r0, r3
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <main>:
 * SPI1_NSS -> PA4
 * GPIO Pin Alternate Function Mode -> AF5
 * */

int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

	GPIO_handle_s	GPIO_handle;
	SPI_handle_s	SPI_handle;

	char *data = "Hello World";
 80008a6:	4b28      	ldr	r3, [pc, #160]	; (8000948 <main+0xa8>)
 80008a8:	61fb      	str	r3, [r7, #28]

	/* NOTE: SPI1_SCK Configuration */
	GPIO_handle.pBaseAddress 			= GPIOA;
 80008aa:	4b28      	ldr	r3, [pc, #160]	; (800094c <main+0xac>)
 80008ac:	613b      	str	r3, [r7, #16]
	GPIO_handle.config.pinNumber 		= 5;
 80008ae:	2305      	movs	r3, #5
 80008b0:	753b      	strb	r3, [r7, #20]
	GPIO_handle.config.pinMode 			= GPIO_ALTERFUNC;
 80008b2:	2310      	movs	r3, #16
 80008b4:	757b      	strb	r3, [r7, #21]
	GPIO_handle.config.pinSpeed 		= GPIO_HIGH;
 80008b6:	2310      	movs	r3, #16
 80008b8:	75bb      	strb	r3, [r7, #22]
	GPIO_handle.config.pinPuPd 			= GPIO_NOPUPD;
 80008ba:	2300      	movs	r3, #0
 80008bc:	75fb      	strb	r3, [r7, #23]
	GPIO_handle.config.pinOutType 		= GPIO_PP;
 80008be:	2300      	movs	r3, #0
 80008c0:	763b      	strb	r3, [r7, #24]
	GPIO_handle.config.pinAltFuncMode 	= 0x05U;
 80008c2:	2305      	movs	r3, #5
 80008c4:	767b      	strb	r3, [r7, #25]

	GPIO_clkCntrl(GPIO_handle.pBaseAddress, ENABLE);
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	2101      	movs	r1, #1
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fcdc 	bl	8000288 <GPIO_clkCntrl>

	GPIO_init(&GPIO_handle);
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fdf7 	bl	80004c8 <GPIO_init>

	/* NOTE: SPI1_MOSI Configuration */
	GPIO_handle.pBaseAddress 			= GPIOD;
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <main+0xb0>)
 80008dc:	613b      	str	r3, [r7, #16]
	GPIO_handle.config.pinNumber 		= 7;
 80008de:	2307      	movs	r3, #7
 80008e0:	753b      	strb	r3, [r7, #20]
	GPIO_handle.config.pinMode 			= GPIO_ALTERFUNC;
 80008e2:	2310      	movs	r3, #16
 80008e4:	757b      	strb	r3, [r7, #21]
	GPIO_handle.config.pinSpeed 		= GPIO_HIGH;
 80008e6:	2310      	movs	r3, #16
 80008e8:	75bb      	strb	r3, [r7, #22]
	GPIO_handle.config.pinPuPd 			= GPIO_NOPUPD;
 80008ea:	2300      	movs	r3, #0
 80008ec:	75fb      	strb	r3, [r7, #23]
	GPIO_handle.config.pinOutType 		= GPIO_PP;
 80008ee:	2300      	movs	r3, #0
 80008f0:	763b      	strb	r3, [r7, #24]
	GPIO_handle.config.pinAltFuncMode 	= 0x05U;
 80008f2:	2305      	movs	r3, #5
 80008f4:	767b      	strb	r3, [r7, #25]

	GPIO_clkCntrl(GPIO_handle.pBaseAddress, ENABLE);
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	2101      	movs	r1, #1
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fcc4 	bl	8000288 <GPIO_clkCntrl>

	GPIO_init(&GPIO_handle);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fddf 	bl	80004c8 <GPIO_init>

	GPIO_writePin(GPIOA, GPIO_PIN_15, SET);
	*/

//	/* NOTE: SPI1 Configuration */
	SPI_handle.pBaseAddress				= SPI1;
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <main+0xb4>)
 800090c:	603b      	str	r3, [r7, #0]
//	SPI_handle.config.SPI_dataFormat	= SPI_DATAFORMAT_8BIT;
//	SPI_handle.config.SPI_cpol			= SPI_CPOL_LOW;
//	SPI_handle.config.SPI_cpha			= SPI_CPHA_LOW;
//	SPI_handle.config.SPI_ssm			= SPI_SSM_EN;
//
	SPI_clkCntrl(SPI_handle.pBaseAddress, ENABLE);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff feb8 	bl	8000688 <SPI_clkCntrl>

	//GPIO_writePin(GPIOA, GPIO_PIN_15, RESET);

	//GPIO_writePin(GPIOA, GPIO_PIN_15, SET);

	SPI_handle.pBaseAddress->CR1 = 0x33C;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	f44f 724f 	mov.w	r2, #828	; 0x33c
 800091e:	601a      	str	r2, [r3, #0]
	SPI_handle.pBaseAddress->CR2 = 0x1708;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	f241 7208 	movw	r2, #5896	; 0x1708
 8000926:	605a      	str	r2, [r3, #4]

	SPI_periphCntrl(&SPI_handle, ENABLE);
 8000928:	463b      	mov	r3, r7
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff23 	bl	8000778 <SPI_periphCntrl>
	controlLED(LED_2_PIN, RESET);
	controlLED(LED_3_PIN, RESET);
	*/
	for(;;){

		SPI_sendData(&SPI_handle, data, strlen(data));
 8000932:	69f8      	ldr	r0, [r7, #28]
 8000934:	f7ff fc80 	bl	8000238 <strlen>
 8000938:	4603      	mov	r3, r0
 800093a:	b2da      	uxtb	r2, r3
 800093c:	463b      	mov	r3, r7
 800093e:	69f9      	ldr	r1, [r7, #28]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff40 	bl	80007c6 <SPI_sendData>
 8000946:	e7f4      	b.n	8000932 <main+0x92>
 8000948:	08000a28 	.word	0x08000a28
 800094c:	40020000 	.word	0x40020000
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40013000 	.word	0x40013000

08000958 <EXTI0_IRQHandler>:
		*/
	}

}

void EXTI0_IRQHandler(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

	GPIO_togglePin(LED_PORT, LED_2_PIN);
 800095c:	2107      	movs	r1, #7
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <EXTI0_IRQHandler+0x18>)
 8000960:	f7ff fe7d 	bl	800065e <GPIO_togglePin>

	EXTI_interruptHandler(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fc6f 	bl	8000248 <EXTI_interruptHandler>

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40020400 	.word	0x40020400

08000974 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000976:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800097a:	490e      	ldr	r1, [pc, #56]	; (80009b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800097c:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <LoopForever+0xe>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1



  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000990:	4c0b      	ldr	r4, [pc, #44]	; (80009c0 <LoopForever+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800099e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80009a2:	f000 f811 	bl	80009c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a6:	f7ff ff7b 	bl	80008a0 <main>

080009aa <LoopForever>:

LoopForever:
    b LoopForever
 80009aa:	e7fe      	b.n	80009aa <LoopForever>
  ldr   r0, =_estack
 80009ac:	2007ffff 	.word	0x2007ffff
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009b8:	08000a3c 	.word	0x08000a3c
  ldr r2, =_sbss
 80009bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009c0:	2000001c 	.word	0x2000001c

080009c4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC_IRQHandler>
	...

080009c8 <__libc_init_array>:
 80009c8:	b570      	push	{r4, r5, r6, lr}
 80009ca:	4e0d      	ldr	r6, [pc, #52]	; (8000a00 <__libc_init_array+0x38>)
 80009cc:	4c0d      	ldr	r4, [pc, #52]	; (8000a04 <__libc_init_array+0x3c>)
 80009ce:	1ba4      	subs	r4, r4, r6
 80009d0:	10a4      	asrs	r4, r4, #2
 80009d2:	2500      	movs	r5, #0
 80009d4:	42a5      	cmp	r5, r4
 80009d6:	d109      	bne.n	80009ec <__libc_init_array+0x24>
 80009d8:	4e0b      	ldr	r6, [pc, #44]	; (8000a08 <__libc_init_array+0x40>)
 80009da:	4c0c      	ldr	r4, [pc, #48]	; (8000a0c <__libc_init_array+0x44>)
 80009dc:	f000 f818 	bl	8000a10 <_init>
 80009e0:	1ba4      	subs	r4, r4, r6
 80009e2:	10a4      	asrs	r4, r4, #2
 80009e4:	2500      	movs	r5, #0
 80009e6:	42a5      	cmp	r5, r4
 80009e8:	d105      	bne.n	80009f6 <__libc_init_array+0x2e>
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009f0:	4798      	blx	r3
 80009f2:	3501      	adds	r5, #1
 80009f4:	e7ee      	b.n	80009d4 <__libc_init_array+0xc>
 80009f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009fa:	4798      	blx	r3
 80009fc:	3501      	adds	r5, #1
 80009fe:	e7f2      	b.n	80009e6 <__libc_init_array+0x1e>
 8000a00:	08000a34 	.word	0x08000a34
 8000a04:	08000a34 	.word	0x08000a34
 8000a08:	08000a34 	.word	0x08000a34
 8000a0c:	08000a38 	.word	0x08000a38

08000a10 <_init>:
 8000a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a12:	bf00      	nop
 8000a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a16:	bc08      	pop	{r3}
 8000a18:	469e      	mov	lr, r3
 8000a1a:	4770      	bx	lr

08000a1c <_fini>:
 8000a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1e:	bf00      	nop
 8000a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a22:	bc08      	pop	{r3}
 8000a24:	469e      	mov	lr, r3
 8000a26:	4770      	bx	lr
