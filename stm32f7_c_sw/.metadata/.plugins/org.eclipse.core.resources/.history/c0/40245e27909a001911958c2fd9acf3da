/**
  ******************************************************************************
  * @file    main.c
  * @author  Auto-generated by STM32CubeIDE
  * @version V1.0
  * @brief   Default main function.
  ******************************************************************************
*/
#include <string.h>

#include "stm32f767xx.h"

#include "util.h"
#include "GPIO_driver.h"
#include "EXTI_driver.h"
#include "SPI_driver.h"

#define LED_PORT 	GPIOB

#define BUTTON_PORT	GPIOC

#define TOUCH_SENSOR_PORT	GPIOG

typedef enum{
	LED_1_PIN = 0,
	LED_2_PIN = 7,
	LED_3_PIN = 14
}led_pin_number_e;

#define BUTTON_PIN	13

#define TOUCH_SENSOR_PIN	0

static void initLED(led_pin_number_e ledNumber);
static void initButton(void);
static void initTouchSensor(void);
static void initTouchSensorITMode(void);
static void controlLED(led_pin_number_e ledNumber, UTIL_SETRESET_e setReset);
static UTIL_SETRESET_e getButtonState(void);
static UTIL_SETRESET_e getTouchedState(void);

/*
 * SPI1 Configuration
 * SPI1_SCK -> PB3
 * SPI1_MOSI -> PB5
 * GPIO Pin Alternate Function Mode -> AF5
 * */

int main(void)
{

	GPIO_handle_s	GPIO_handle;
	SPI_handle_s	SPI_handle;

	uint8_t data = "Hello World";

	/* NOTE: SPI1_SCK Configuration */
	GPIO_handle.pBaseAddress 			= GPIOB;
	GPIO_handle.config.pinNumber 		= 3;
	GPIO_handle.config.pinMode 			= GPIO_ALTERFUNC;
	GPIO_handle.config.pinSpeed 		= GPIO_HIGH;
	GPIO_handle.config.pinPuPd 			= GPIO_NOPUPD;
	GPIO_handle.config.pinOutType 		= GPIO_PP;
	GPIO_handle.config.pinAltFuncMode 	= 0x05U;

	GPIO_clkCntrl(GPIO_handle.pBaseAddress, ENABLE);

	GPIO_init(&GPIO_handle);

	/* NOTE: SPI1_MOSI Configuration */
	GPIO_handle.config.pinNumber 		= 5;

	GPIO_clkCntrl(GPIO_handle.pBaseAddress, ENABLE);

	GPIO_init(&GPIO_handle);

	/* NOTE: SPI1 Configuration */
	SPI_handle->pBaseAddress			= SPI1;
	SPI_handle->config.SPI_devMode 		= SPI_DEVMODE_MASTER;
	SPI_handle->config.SPI_busConfig 	= SPI_BUSCONFIG_FULLDUPLEX;
	SPI_handle->config.SPI_clkSpeed		= SPI_CLKSPEED_DIV2;
	SPI_handle->config.SPI_dataFormat	= SPI_DATAFORMAT_8BIT;
	SPI_handle->config.SPI_cpol			= SPI_CPOL_LOW;
	SPI_handle->config.SPI_cpha			= SPI_CPHA_LOW;
	SPI_handle->config.SPI_ssm			= SPI_SSM_DIS;

	SPI_clkCntrl(SPI_handle->pBaseAddress, ENABLE);

	SPI_init(&SPI_handle);

	SPI_periphCntrl(&SPI_handle, ENABLE)

	/*
	UTIL_lockUnlock_e lockState = UNLOCK;

	initLED(LED_1_PIN);
	initLED(LED_2_PIN);
	initLED(LED_3_PIN);

	initButton();

	//initTouchSensor();
	initTouchSensorITMode();

	//lockState = GPIO_lockPort(TOUCH_SENSOR_PORT, 0x00000001U << TOUCH_SENSOR_PIN);

	controlLED(LED_1_PIN, SET);
	controlLED(LED_2_PIN, SET);
	controlLED(LED_3_PIN, SET);

	controlLED(LED_1_PIN, RESET);
	controlLED(LED_2_PIN, RESET);
	controlLED(LED_3_PIN, RESET);
	*/
	for(;;){

		SPI_sendData(&SPI_handle, data, sizeof(data) / sizeof(uint8_t));

		/*
		controlLED(LED_3_PIN, getButtonState());
		//controlLED(LED_2_PIN, getTouchedState());
		*/
	}

}

void EXTI0_IRQHandler(void){

	GPIO_togglePin(LED_PORT, LED_2_PIN);

	EXTI_interruptHandler(0);

}

static void initLED(led_pin_number_e ledNumber){

	GPIO_handle_s GPIO_handle;

	GPIO_handle.pBaseAddress 			= LED_PORT;
	GPIO_handle.config.pinNumber 		= ledNumber;
	GPIO_handle.config.pinMode 			= GPIO_OUTPUT;
	GPIO_handle.config.pinSpeed 		= GPIO_MEDIUM;
	GPIO_handle.config.pinPuPd 			= GPIO_NOPUPD;
	GPIO_handle.config.pinOutType 		= GPIO_PP;
	GPIO_handle.config.pinAltFuncMode 	= 0x00U;

	GPIO_clkCntrl(GPIO_handle.pBaseAddress, ENABLE);

	GPIO_init(&GPIO_handle);

}

static void initButton(void){

	GPIO_handle_s GPIO_handle;

	GPIO_handle.pBaseAddress 			= BUTTON_PORT;
	GPIO_handle.config.pinNumber 		= BUTTON_PIN;
	GPIO_handle.config.pinMode 			= GPIO_INPUT;
	GPIO_handle.config.pinSpeed 		= GPIO_MEDIUM;
	GPIO_handle.config.pinPuPd 			= GPIO_NOPUPD;
	GPIO_handle.config.pinOutType 		= GPIO_OD;
	GPIO_handle.config.pinAltFuncMode 	= 0x00U;

	GPIO_clkCntrl(GPIO_handle.pBaseAddress, ENABLE);

	GPIO_init(&GPIO_handle);

}

static void initTouchSensor(void){

	GPIO_handle_s GPIO_handle;

	GPIO_handle.pBaseAddress 			= TOUCH_SENSOR_PORT;
	GPIO_handle.config.pinNumber 		= TOUCH_SENSOR_PIN;
	GPIO_handle.config.pinMode 			= GPIO_INPUT;
	GPIO_handle.config.pinSpeed 		= GPIO_MEDIUM;
	GPIO_handle.config.pinPuPd 			= GPIO_NOPUPD;
	GPIO_handle.config.pinOutType 		= GPIO_OD;
	GPIO_handle.config.pinAltFuncMode 	= 0x00U;

	GPIO_clkCntrl(GPIO_handle.pBaseAddress, ENABLE);

	GPIO_init(&GPIO_handle);

}

static void initTouchSensorITMode(void){

	GPIO_handle_s GPIO_handle;
	EXTI_handle_s EXTI_handle;

	GPIO_handle.pBaseAddress 			= TOUCH_SENSOR_PORT;
	GPIO_handle.config.pinNumber 		= TOUCH_SENSOR_PIN;
	GPIO_handle.config.pinMode 			= GPIO_INPUT;
	GPIO_handle.config.pinSpeed 		= GPIO_MEDIUM;
	GPIO_handle.config.pinPuPd 			= GPIO_NOPUPD;
	GPIO_handle.config.pinOutType 		= GPIO_OD;
	GPIO_handle.config.pinAltFuncMode 	= 0x00U;

	GPIO_clkCntrl(GPIO_handle.pBaseAddress, ENABLE);

	GPIO_init(&GPIO_handle);

	EXTI_handle.pBaseAddress = EXTI_BASE;
	EXTI_handle.config.triggerSelection = RISING;
	EXTI_handle.config.lineSelect = _EXTI0_IRQn;

	EXTI_initExtInt(&GPIO_handle, &EXTI_handle);

	EXTI_configPriority(&EXTI_handle, 0x01);

	EXTI_enableDisable(&EXTI_handle, ENABLE);

}

static void controlLED(led_pin_number_e ledNumber, UTIL_SETRESET_e setReset){

	GPIO_writePin(LED_PORT, ledNumber, setReset);

}

static UTIL_SETRESET_e getButtonState(void){

	return GPIO_readPin(BUTTON_PORT, BUTTON_PIN);

}

static UTIL_SETRESET_e getTouchedState(void){

	return GPIO_readPin(TOUCH_SENSOR_PORT, TOUCH_SENSOR_PIN);

}
