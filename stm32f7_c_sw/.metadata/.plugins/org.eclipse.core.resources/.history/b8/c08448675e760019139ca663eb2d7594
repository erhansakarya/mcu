#ifndef __GPIO_DRIVER_H
#define __GPIO_DRIVER_H

#ifdef __cplusplus
 extern "C" {
#endif /* __cplusplus */

#include "stm32f767xx.h"

#include "util.h"

typedef enum{
	GPIO_PIN_0 	= 0,
	GPIO_PIN_1 	= 1,
	GPIO_PIN_2 	= 2,
	GPIO_PIN_3 	= 3,
	GPIO_PIN_4 	= 4,
	GPIO_PIN_5 	= 5,
	GPIO_PIN_6 	= 6,
	GPIO_PIN_7 	= 7,
	GPIO_PIN_8 	= 8,
	GPIO_PIN_9 	= 9,
	GPIO_PIN_10 = 10,
	GPIO_PIN_11 = 11,
	GPIO_PIN_12 = 12,
	GPIO_PIN_13 = 13,
	GPIO_PIN_14 = 14,
	GPIO_PIN_15 = 15,
};

typedef enum{
	GPIO_INPUT 		= 0x00,
	GPIO_OUTPUT 	= 0x01,
	GPIO_ALTERFUNC 	= 0x10,
	GPIO_ANALOG 	= 0x11
}GPIO_pinMode_e;

typedef enum{
	GPIO_LOW 		= 0x00,
	GPIO_MEDIUM 	= 0x01,
	GPIO_HIGH 		= 0x10,
	GPIO_VERYHIGH 	= 0x11
}GPIO_pinSpeed_e;

typedef enum{
	GPIO_PP = 0x00,
	GPIO_OD = 0x01
}GPIO_pinOutType_e;

typedef enum{
	GPIO_NOPUPD 	= 0x00,
	GPIO_PULLUP 	= 0x01,
	GPIO_PULLDOWN 	= 0x10
}GPIO_pinPuPdCntrl_e;

typedef struct{
	uint8_t 			pinNumber;
	GPIO_pinMode_e		pinMode;
	GPIO_pinSpeed_e 	pinSpeed;
	GPIO_pinPuPdCntrl_e pinPuPdCntrl;
	GPIO_pinOutType_e 	pinOutType;
	uint8_t 			pinAltFuncMode;
}GPIO_config_s;

typedef struct{
	GPIO_TypeDef	*pBaseAddress;
	GPIO_config_s	config;
}GPIO_handle_s;

extern void GPIO_clkCntrl(GPIO_TypeDef *pBaseAddress, UTIL_enableDisable_e enableDisable);

extern void GPIO_init(GPIO_handle_s *GPIO_handle);
extern void GPIO_deInit(GPIO_TypeDef *pBaseAddress);

extern UTIL_setReset_e GPIO_readPin(GPIO_TypeDef *pBaseAddress, uint8_t pinNumber);
extern uint16_t GPIO_readPort(GPIO_TypeDef *pBaseAddress);
extern void GPIO_writePin(GPIO_TypeDef *pBaseAddress, uint8_t pinNumber, UTIL_setReset_e UTIL_setReset);
extern void GPIO_writePort(GPIO_TypeDef *pBaseAddress, uint16_t portValue);
extern void GPIO_togglePin(GPIO_TypeDef *pBaseAddress, uint8_t pinNumber);

extern void GPIO_irqConfig(uint8_t irqNumber, uint8_t irqGrouping, uint8_t irqPriority, UTIL_enableDisable_e enableDisable);
extern void GPIO_irqHandler(uint8_t pinNumber);

#endif
