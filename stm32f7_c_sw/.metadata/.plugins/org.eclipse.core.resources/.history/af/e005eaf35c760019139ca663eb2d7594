#ifndef __GPIO_DRIVER_H
#define __GPIO_DRIVER_H

#ifdef __cplusplus
 extern "C" {
#endif /* __cplusplus */

#include "stm32f767xx.h"

#include "util.h"

typedef enum{
	GPIO_INPUT = 0x00,
	GPIO_OUTPUT = 0x01,
	GPIO_ALTERFUNC = 0x10,
	GPIO_ANALOG = 0x11
}GPIO_pinMode_e;

typedef enum{
	GPIO_PP = 0x00,
	GPIO_OD = 0x01
}GPIO_pinOutType_e;

typedef struct{
	uint8_t pinNumber;
	GPIO_pinMode_e pinMode;
	uint8_t pinSpeed;
	uint8_t pinPuPdControl;
	uint8_t pinOutType;
	uint8_t pinAltFuncMode;
}GPIO_config_s;

typedef struct{
	GPIO_TypeDef	*pBaseAddress;
	GPIO_config_s		config;
}GPIO_handle_s;

extern void GPIO_clkCntrl(GPIO_TypeDef *pBaseAddress, UTIL_enableDisable_e enableDisable);

extern void GPIO_init(GPIO_handle_s *GPIO_handle);
extern void GPIO_deInit(GPIO_TypeDef *pBaseAddress);

extern UTIL_setReset_e GPIO_readPin(GPIO_TypeDef *pBaseAddress, uint8_t pinNumber);
extern uint16_t GPIO_readPort(GPIO_TypeDef *pBaseAddress);
extern void GPIO_writePin(GPIO_TypeDef *pBaseAddress, uint8_t pinNumber, UTIL_setReset_e UTIL_setReset);
extern void GPIO_writePort(GPIO_TypeDef *pBaseAddress, uint16_t portValue);
extern void GPIO_togglePin(GPIO_TypeDef *pBaseAddress, uint8_t pinNumber);

extern void GPIO_irqConfig(uint8_t irqNumber, uint8_t irqGrouping, uint8_t irqPriority, UTIL_enableDisable_e enableDisable);
extern void GPIO_irqHandler(uint8_t pinNumber);

#endif
